import React from 'react';
import { FileText, Download, RefreshCw } from 'lucide-react';
import ScoreCard from './ScoreCard';
import RecommendationCard from './RecommendationCard';
import ResumeTips from './ResumeTips';

interface AnalysisResult {
  fileName: string;
  overallScore: number;
  atsCompatibility: number;
  keywordOptimization: number;
  formatting: number;
  contentQuality: number;
  recommendations: Array<{
    type: 'critical' | 'warning' | 'info' | 'tip';
    title: string;
    description: string;
    actionItems: string[];
  }>;
}

interface AnalysisReportProps {
  result: AnalysisResult;
  onNewAnalysis: () => void;
}

const AnalysisReport: React.FC<AnalysisReportProps> = ({ result, onNewAnalysis }) => {
  const handleDownloadReport = () => {
    // Generate a detailed report
    const reportContent = `
ATS Resume Analysis Report
=========================

File: ${result.fileName}
Analysis Date: ${new Date().toLocaleDateString()}

OVERALL SCORES:
- Overall Score: ${result.overallScore}/100
- ATS Compatibility: ${result.atsCompatibility}/100
- Keyword Optimization: ${result.keywordOptimization}/100
- Formatting: ${result.formatting}/100
- Content Quality: ${result.contentQuality}/100

RECOMMENDATIONS:
${result.recommendations.map(rec => `
${rec.type.toUpperCase()}: ${rec.title}
${rec.description}
Action Items:
${rec.actionItems.map(item => `- ${item}`).join('\n')}
`).join('\n')}

Generated by ATS Resume Checker
    `;

    const blob = new Blob([reportContent], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `ATS_Analysis_Report_${result.fileName.replace(/\.[^/.]+$/, '')}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  return (
    <div className="w-full max-w-6xl mx-auto space-y-8">
      {/* Header */}
      <div className="bg-white rounded-xl shadow-lg p-6 border border-gray-200">
        <div className="flex items-center justify-between mb-4">
          <div className="flex items-center space-x-3">
            <FileText className="w-8 h-8 text-blue-600" />
            <div>
              <h2 className="text-2xl font-bold text-gray-900">Analysis Complete</h2>
              <p className="text-gray-600">File: {result.fileName}</p>
            </div>
          </div>
          <div className="flex space-x-3">
            <button
              onClick={handleDownloadReport}
              className="flex items-center space-x-2 px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors duration-200"
            >
              <Download className="w-4 h-4" />
              <span>Download Report</span>
            </button>
            <button
              onClick={onNewAnalysis}
              className="flex items-center space-x-2 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors duration-200"
            >
              <RefreshCw className="w-4 h-4" />
              <span>New Analysis</span>
            </button>
          </div>
        </div>
        
        {/* Overall Score Display */}
        <div className="bg-gradient-to-r from-blue-50 to-purple-50 rounded-lg p-6">
          <div className="text-center">
            <div className="inline-flex items-center justify-center w-24 h-24 bg-white rounded-full shadow-lg mb-4">
              <span className={`text-3xl font-bold ${
                result.overallScore >= 80 ? 'text-green-600' :
                result.overallScore >= 60 ? 'text-yellow-600' : 'text-red-600'
              }`}>
                {result.overallScore}
              </span>
            </div>
            <h3 className="text-xl font-semibold text-gray-900 mb-2">Overall ATS Score</h3>
            <p className="text-gray-600">
              {result.overallScore >= 80 ? 'Excellent! Your resume is highly ATS-friendly.' :
               result.overallScore >= 60 ? 'Good, but there\'s room for improvement.' :
               'Needs attention to improve ATS compatibility.'}
            </p>
          </div>
        </div>
      </div>

      {/* Score Cards */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        <ScoreCard
          title="ATS Compatibility"
          score={result.atsCompatibility}
          maxScore={100}
          description="How well your resume can be read by ATS systems"
          trend={result.atsCompatibility >= 80 ? 'up' : result.atsCompatibility >= 60 ? 'neutral' : 'down'}
        />
        <ScoreCard
          title="Keyword Optimization"
          score={result.keywordOptimization}
          maxScore={100}
          description="Relevance of keywords to your target roles"
          trend={result.keywordOptimization >= 80 ? 'up' : result.keywordOptimization >= 60 ? 'neutral' : 'down'}
        />
        <ScoreCard
          title="Formatting"
          score={result.formatting}
          maxScore={100}
          description="Structure and format consistency"
          trend={result.formatting >= 80 ? 'up' : result.formatting >= 60 ? 'neutral' : 'down'}
        />
        <ScoreCard
          title="Content Quality"
          score={result.contentQuality}
          maxScore={100}
          description="Quality and relevance of content"
          trend={result.contentQuality >= 80 ? 'up' : result.contentQuality >= 60 ? 'neutral' : 'down'}
        />
      </div>

      {/* Recommendations */}
      <div className="space-y-6">
        <h3 className="text-2xl font-bold text-gray-900">Recommendations</h3>
        <div className="space-y-4">
          {result.recommendations.map((rec, index) => (
            <RecommendationCard
              key={index}
              type={rec.type}
              title={rec.title}
              description={rec.description}
              actionItems={rec.actionItems}
            />
          ))}
        </div>
      </div>

      {/* Professional Tips Section */}
      <ResumeTips />
    </div>
  );
};

export default AnalysisReport;